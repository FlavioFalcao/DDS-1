Starting with release 1.2, OpenDDS provides Java bindings.  Java applications
can make use of the complete OpenDDS middleware just like C++ applications.

See the README file in the $DDS_ROOT directory (one level above here) for a
general overview of OpenDDS.


======================================================================
* Frequently Asked Questions (FAQ)
  
  - Why does my program fail with a java.lang.UnsatisfiedLinkError?

    Because the Java bindings make heavy use of JNI, the native OpenDDS
    libraries and its dependencies must be available for the JVM to 
    load at runtime. Please refer to the JVM documentation on how to
    configure the JVM library path.

    If the JVM library path is configured correctly, it is still possible
    to encounter the above Exception if your code references a symbol
    prior to loading the library. To avoid this issue, your code should
    always reference TheParticipantFactory before referencing any other
    Java binding classes.

  - Why does my program fail when attaching both a Publisher and a 
    Subscriber to the same TransportImpl instance?

    This is a known issue. If a Publish and Subscriber are used within
    the same JVM process, a separate TransportImpl instance (and 
    associated configuration) must be used for each.

  - Why do my DataReaderListener and DataWriterListener implementations
    fail silently with the log message:
    
      ERROR: TransportReactorTask::svc caught exception.
  
    If a Throwable is thrown from the DataWriterListener or
    DataReaderListener instance, the above error will be logged (this is
    a known issue). As a temporary fix, you may wrap the listener in a
    try catch block and catch generic Exceptions. It is generally not a
    good idea to catch Throwable instances as this could result in
    unpredictable behavior in the event of a JVM error.
