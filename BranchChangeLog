Tue Nov 25 21:02:44 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/transport/framework/DirectPriorityMapper.h:
        * dds/DCPS/transport/framework/DirectPriorityMapper.inl:
        * dds/DCPS/transport/framework/DirectPriorityMapper.cpp:
        * dds/DCPS/transport/framework/PriorityMapper.h:
        * dds/DCPS/transport/framework/PriorityMapper.inl:
        * dds/DCPS/transport/framework/PriorityMapper.cpp:

          Added feature to map TRANSPORT_PRIORITY values to DiffServ
          codepoint and thread priority values.  This includes an
          abstract interface and a direct mapping implementation.  The
          direct mapping simply maps an in-range priority value to the
          mapped value and maps out of range values to the nearest
          extremum.

          For thread priorities, ordering is accounted for.  This means
          that if priorities range from 0 (minimum) to a negative value
          (maximum), then the TRANSPORT_PRIORITY value will be mapped
          from [0,range] directly and out of range values will be mapped
          to the closest extremum.  Increasing TRANSPORT_PRIORITY integer
          values will always correspond to increasing thread priority
          values.  See the block header in the DirectPriorityMapper
          header for additional detail.

Mon Nov 24 16:47:46 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/DataReaderImpl.h:
        * dds/DCPS/DataReaderImpl.inl:
        * dds/DCPS/DataReaderImpl.cpp:

        statistics_enabled()
          - added accessors to set and query the (new)
            statistics gathering state.  The initial state is 'false'
            which disables statistics gathering.
        struct LatencyStats
          - added a subscription and publication RepoId field to the
            structure to allow correlating the statistics to the
            association.
        WriterInfo::get_stats()
          - Added subscription id to interface, included copying out the
            publication id of the writer into the structure.

Fri Nov 21 22:57:32 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/Stats_T.h:

          Added a statistics gathering class.

        * dds/DCPS/DataReaderImpl.h:
        * dds/DCPS/DataReaderImpl.cpp:

          Added LatencyStats structure to contain statistical data
          summaries per writer.  Added the following members and methods:
            WriterInfo::add_stat()
              - add a latency datum to the statistics for a single writer
                to a reader.
            WriterInfo::get_stats()
              - interface to collect current statistical values for a
                single writer to a reader.
            WriterInfo::reset_stats()
              - interface to clear all statistical data for a single
                writer to a reader.
            WriterInfo::stats_
              - new statistical accumulator member.
            DataReaderImpl::process_latency()
              - implemented this behavior to collect statistics and check
                latency against budget policy value.
            DataReaderImpl::notify_latency()
              - implemented this behavior to callback on_budget_exceeded().
            DataReaderImpl::get_latency_stats()
              - implemented this to return a vector of LatencyStats
                structures, one for each publication sending to the
                reader.
            DataReaderImpl::reset_latency_stats()
              - implemented this to clear all statistics gathering state
                for the reader.
            DataReaderImpl::budget_exceeded_status_
              - member to retain count of budget violations and handle of
                most recent violator.

        * dds/DCPS/Qos_Helper.inl:

          Removed an unused argument warning.

        * dds/DdsDcpsSubscription.idl:

          Added BudgetExceededStatus structure definition and added a
          parameter of this type to the
          OpenDDS::DCPS::DataReaderListener::on_budget_exceeded()
          callback.

        * dds/DCPS/FailoverListener.h:
        * dds/DCPS/FailoverListener.cpp:
        * DevGuideExamples/DCPS/Messenger_ZeroCopy/DataReaderListener.h:
        * DevGuideExamples/DCPS/Messenger_ZeroCopy/DataReaderListener.cpp:
        * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.h:
        * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.cpp:
        * examples/DCPS/Messenger_Imr/DataReaderListener.h:
        * examples/DCPS/Messenger_Imr/DataReaderListener.cpp:
        * tests/DCPS/CompatibilityTest/DataReaderListener.h:
        * tests/DCPS/CompatibilityTest/DataReaderListener.cpp:
        * tests/DCPS/CorbaSeq/DataReaderListener.h:
        * tests/DCPS/CorbaSeq/DataReaderListener.cpp:
        * tests/DCPS/Deadline/DataReaderListener.h:
        * tests/DCPS/Deadline/DataReaderListener.cpp:
        * tests/DCPS/FooTest4_0/DataReaderListener.h:
        * tests/DCPS/FooTest4_0/DataReaderListener.cpp:
        * tests/DCPS/Lifespan/DataReaderListener.h:
        * tests/DCPS/Lifespan/DataReaderListener.cpp:
        * tests/DCPS/LivelinessTest/DataReaderListener.h:
        * tests/DCPS/LivelinessTest/DataReaderListener.cpp:
        * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.h:
        * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.cpp:
        * tests/DCPS/MultiTopicTest/DataReaderListener.h:
        * tests/DCPS/MultiTopicTest/DataReaderListener.cpp:
        * tests/DCPS/Partition/DataReaderListener.h:
        * tests/DCPS/Partition/DataReaderListener.cpp:
        * tests/DCPS/PersistentDurability/DataReaderListener.h:
        * tests/DCPS/PersistentDurability/DataReaderListener.cpp:
        * tests/DCPS/Priority/DataReaderListener.h:
        * tests/DCPS/Priority/DataReaderListener.cpp:
        * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.h:
        * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.cpp:
        * tests/DCPS/Reconnect/DataReaderListener.h:
        * tests/DCPS/Reconnect/DataReaderListener.cpp:
        * tests/DCPS/SetQosDeadline/DataReaderListener.h:
        * tests/DCPS/SetQosDeadline/DataReaderListener.cpp:
        * tests/DCPS/SetQosPartition/DataReaderListener.h:
        * tests/DCPS/SetQosPartition/DataReaderListener.cpp:
        * tests/DCPS/TransientDurability/DataReaderListener.h:
        * tests/DCPS/TransientDurability/DataReaderListener.cpp:
        * tests/DCPS/TransientLocalTest/DataReaderListener.h:
        * tests/DCPS/TransientLocalTest/DataReaderListener.cpp:

          Added BudgetExceededStatus parameter to on_budget_exceeded()
          callback.

Thu Nov 20 20:22:19 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/DataReaderImpl.cpp:

          Removed setting the Writer status LIVELINESS_LOST and added
          status changed indication sets for LIVELINESS_CHANGED where
          required (not all change locations had set the indicator).

        * dds/DCPS/ConditionImpl.cpp:
        * dds/DCPS/StatusConditionImpl.cpp:

          Added some debug level 10 diagnostic messages.

        * tests/DCPS/Priority/DataReaderListener.h:
        * tests/DCPS/Priority/DataReaderListener.cpp:
        * tests/DCPS/Priority/Options.h:
        * tests/DCPS/Priority/Options.inl:
        * tests/DCPS/Priority/Options.cpp:
        * tests/DCPS/Priority/Publisher.cpp:
        * tests/DCPS/Priority/Subscriber.h:
        * tests/DCPS/Priority/Subscriber.cpp:
        * tests/DCPS/Priority/Test.h:
        * tests/DCPS/Priority/run_test.pl:
        * tests/DCPS/Priority/subscriber_main.cpp:

          Updated the testing to pass data at specified priorities.  This
          currently has a single writer per publisher process.  There are
          some startup and shutdown association management race
          conditions and the multicast transports are not working
          robustly.

Thu Nov 20 19:40:30 UTC 2008  Jonathan Pollack  <pollack_j@ociweb.com>

        * DevGuideExamples/DCPS/Messenger_ZeroCopy/DataReaderListener.h:
        * DevGuideExamples/DCPS/Messenger_ZeroCopy/DataReaderListener.cpp:
        * dds/DCPS/DataReaderImpl.h:
        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/FailoverListener.h:
        * dds/DCPS/FailoverListener.cpp:
        * dds/DCPS/Qos_Helper.inl:
        * dds/DdsDcpsSubscription.idl:
        * dds/InfoRepo/DCPS_Utils.cpp:
        * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.h:
        * examples/DCPS/Messenger_IOGR_Imr/DataReaderListener.cpp:
        * examples/DCPS/Messenger_Imr/DataReaderListener.h:
        * examples/DCPS/Messenger_Imr/DataReaderListener.cpp:
        * tests/DCPS/CompatibilityTest/DataReaderListener.h:
        * tests/DCPS/CompatibilityTest/DataReaderListener.cpp:
        * tests/DCPS/CorbaSeq/DataReaderListener.h:
        * tests/DCPS/CorbaSeq/DataReaderListener.cpp:
        * tests/DCPS/Deadline/DataReaderListener.h:
        * tests/DCPS/Deadline/DataReaderListener.cpp:
        * tests/DCPS/FooTest4_0/DataReaderListener.h:
        * tests/DCPS/FooTest4_0/DataReaderListener.cpp:
        * tests/DCPS/Lifespan/DataReaderListener.h:
        * tests/DCPS/Lifespan/DataReaderListener.cpp:
        * tests/DCPS/LivelinessTest/DataReaderListener.h:
        * tests/DCPS/LivelinessTest/DataReaderListener.cpp:
        * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.h:
        * tests/DCPS/LivelinessTimeout/DataReaderListenerImpl.cpp:
        * tests/DCPS/MultiTopicTest/DataReaderListener.h:
        * tests/DCPS/MultiTopicTest/DataReaderListener.cpp:
        * tests/DCPS/Partition/DataReaderListener.h:
        * tests/DCPS/Partition/DataReaderListener.cpp:
        * tests/DCPS/PersistentDurability/DataReaderListener.h:
        * tests/DCPS/PersistentDurability/DataReaderListener.cpp:
        * tests/DCPS/Priority/DataReaderListener.h:
        * tests/DCPS/Priority/DataReaderListener.cpp:
        * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.h:
        * tests/DCPS/Prst_delayed_subscriber/DataReaderListener.cpp:
        * tests/DCPS/Reconnect/DataReaderListener.h:
        * tests/DCPS/Reconnect/DataReaderListener.cpp:
        * tests/DCPS/SetQosDeadline/DataReaderListener.h:
        * tests/DCPS/SetQosDeadline/DataReaderListener.cpp:
        * tests/DCPS/SetQosPartition/DataReaderListener.h:
        * tests/DCPS/SetQosPartition/DataReaderListener.cpp:
        * tests/DCPS/TransientDurability/DataReaderListener.h:
        * tests/DCPS/TransientDurability/DataReaderListener.cpp:
        * tests/DCPS/TransientLocalTest/DataReaderListener.h:
        * tests/DCPS/TransientLocalTest/DataReaderListener.cpp:

          Added glue and callback methods for LATENCY_BUDGET QoS processing;
          the addition of a callback required a lot of test code to be
          modified.

Wed Nov 19 04:18:22 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * tests/DCPS/Priority/DataReaderListener.cpp:
        * tests/DCPS/Priority/Options.h:
        * tests/DCPS/Priority/Options.inl:
        * tests/DCPS/Priority/Options.cpp:
        * tests/DCPS/Priority/Priority.mpc:
        * tests/DCPS/Priority/Publisher.h:
        * tests/DCPS/Priority/Publisher.cpp:
        * tests/DCPS/Priority/Subscriber.h:
        * tests/DCPS/Priority/Subscriber.cpp:
        * tests/DCPS/Priority/Test.h:
        * tests/DCPS/Priority/run_test.pl:

          Publisher and subscriber are passing data.  There remain some
          test synchronization issues.

        * tests/DCPS/Priority/DataWriterListener.h:
        * tests/DCPS/Priority/DataWriterListener.cpp:

          Removed these files.

Tue Nov 18 01:30:29 UTC 2008  Mike Martinez  <martinez_m@lab.ociweb.com>

        * tests/DCPS/Priority/DataReaderListener.h:
        * tests/DCPS/Priority/DataWriterListener.h:
        * tests/DCPS/Priority/Options.h:
        * tests/DCPS/Priority/Options.inl:
        * tests/DCPS/Priority/Options.cpp:
        * tests/DCPS/Priority/Priority.mpc:
        * tests/DCPS/Priority/Publisher.h:
        * tests/DCPS/Priority/Publisher.cpp:
        * tests/DCPS/Priority/Subscriber.h:
        * tests/DCPS/Priority/Subscriber.cpp:
        * tests/DCPS/Priority/Test.h:
        * tests/DCPS/Priority/publisher_main.cpp:
        * tests/DCPS/Priority/subscriber_main.cpp:

          Capturing the days implementation.  Publisher and subscriber
          are initializing now.  Improved the argument specification and
          handling.

Fri Nov 14 23:18:27 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * tests/DCPS/Priority/Options.h:
        * tests/DCPS/Priority/Options.inl:
        * tests/DCPS/Priority/Options.cpp:
        * tests/DCPS/Priority/Priority.mpc:
        * tests/DCPS/Priority/Publisher.cpp:
        * tests/DCPS/Priority/run_test.pl:
        * tests/DCPS/Priority/svc.conf:
        * tests/DCPS/Priority/transport.ini:

          Beginning some implementation of the testing.

Thu Nov 13 23:18:43 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * tests/DCPS/Priority:
        * tests/DCPS/Priority/DataReaderListener.h:
        * tests/DCPS/Priority/DataReaderListener.cpp:
        * tests/DCPS/Priority/DataWriterListener.h:
        * tests/DCPS/Priority/DataWriterListener.cpp:
        * tests/DCPS/Priority/Priority.mpc:
        * tests/DCPS/Priority/Publisher.cpp:
        * tests/DCPS/Priority/README:
        * tests/DCPS/Priority/Subscriber.cpp:
        * tests/DCPS/Priority/Test.idl:
        * tests/DCPS/Priority/run_test.pl:

          Adding test skeleton for TRANSPORT_PRIORITY.

Thu Nov 13 20:13:55 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/transport/framework/PriorityKey.h:
        * dds/DCPS/transport/framework/PriorityKey.inl:
        * dds/DCPS/transport/framework/PriorityKey.cpp:

          Added complex key type for storing connection objects.

        * dds/DCPS/transport/ReliableMulticast/ReliableMulticastTransportImpl.h:
        * dds/DCPS/transport/ReliableMulticast/ReliableMulticastTransportImpl.cpp:

          Store data links using priority/address complex key.

        * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.h:
        * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.inl:
        * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp:
        * dds/DCPS/transport/simpleTCP/SimpleTcpConnectionReplaceTask.cpp:
        * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.h:
        * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp:

          Store data links using priority/address complex key.

        * dds/DCPS/transport/simpleUnreliableDgram/SimpleMcastTransport.h:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleMcastTransport.inl:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUdpTransport.h:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUdpTransport.inl:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramDataLink.h:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramDataLink.inl:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramReceiveStrategy.cpp:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramTransport.h:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramTransport.inl:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramTransport.cpp:

          Store data links using priority/address complex key.

Thu Nov 13 01:24:50 UTC 2008  Mike Martinez  <martinez_m@lab.ociweb.com>

        * dds/DCPS/SubscriberImpl.cpp:
        * dds/DCPS/transport/ReliableMulticast/ReliableMulticastTransportImpl.h:
        * dds/DCPS/transport/ReliableMulticast/ReliableMulticastTransportImpl.cpp:
        * dds/DCPS/transport/framework/TransportImpl.h:
        * dds/DCPS/transport/framework/TransportImpl.cpp:
        * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.h:
        * dds/DCPS/transport/simpleTCP/SimpleTcpTransport.cpp:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramTransport.h:
        * dds/DCPS/transport/simpleUnreliableDgram/SimpleUnreliableDgramTransport.cpp:
        * performance-tests/DCPS/dummyTCP/DummyTcpTransport.h:
        * performance-tests/DCPS/dummyTCP/DummyTcpTransport.cpp:

          Move the TRANSPORT_PRIORITY.value policy value to the place(s)
          where it will be used.

Wed Nov 12 16:48:49 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/Qos_Helper.inl:

          Fix some parameter issues.

Tue Nov 11 23:58:51 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * dds/DCPS/Qos_Helper.inl:

          Making TRANSPORT_PRIORITY available as a non-default value.

Mon Nov 10 19:54:12 UTC 2008  Mike Martinez  <martinez_m@ociweb.com>

        * BranchChangeLog:

          Added a branch specific ChangeLog.

vim: filetype=changelog

Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
