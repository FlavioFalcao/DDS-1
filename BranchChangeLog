Tue Apr 27 21:59:49 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/Comparator_T.h:

          Consider the global namespace for operator< because that's where the
          operator< for TAO::String_Manager is defined.

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:

          Removed code that's no longer needed now that the opendds_idl is used.

        * dds/DCPS/PublisherImpl.h:
        * dds/DCPS/PublisherImpl.cpp:

          Removed unnecessary namespace qualification and moved the typedef for
          DataWriterAckMap down to the .cpp since it's only used there.

        * dds/idl/keys_generator.cpp:

          Applied the same fix from Comparator_T.h (above) to the code that
          we're generating for KeyLessThan.

        * dds/idl/marshal_generator.cpp:

          Allow defaulted unions (that have no default: branch) to be
          serialized and deserialized.

Tue Apr 27 16:22:44 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        This commit switches the OpenDDS marshaling (serialization) code
        generator from tao_idl -Gdcps to opendds_idl.  This may have
        implications for user code (which will eventually be documented in the
        NEWS), but should be mostly transparent.

        * MPC/config/dcps.mpb:

          Removed -Gdcps.  This code is now generated by opendds_idl.

        * MPC/modules/TYPESUPPORTHelper.pm:

          Added support for -o (output dir) and -SI (suppress generation of
          TypeSupport.idl).

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/RakeResults_T.cpp:

          Integrated the older support for "ORDER BY" in QueryCondition with
          the new getMetaStruct<>() infrastructure.

        * dds/DCPS/DataCollector_T.h:
        * dds/DCPS/DataCollector_T.inl:
        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataSampleHeader.h:
        * dds/DCPS/DataSampleHeader.cpp:
        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/Definitions.h:
        * dds/DCPS/GuidConverter.h:
        * dds/DCPS/GuidConverter.cpp:
        * dds/DCPS/GuidUtils.h:
        * dds/DCPS/GuidUtils.cpp:
        * dds/DCPS/OfferedDeadlineWatchdog.h:
        * dds/DCPS/Qos_Helper.h:
        * dds/DCPS/Qos_Helper.inl:
        * dds/DCPS/Serializer.h:
        * dds/DCPS/Serializer.inl:
        * dds/DCPS/Serializer.cpp:
        * dds/DCPS/transport/framework/DataLink.cpp:
        * dds/DCPS/transport/framework/ReceiveListenerSet.h:
        * dds/DCPS/transport/framework/RepoIdSet.h:
        * dds/DCPS/transport/framework/RepoIdSet.cpp:
        * dds/DCPS/transport/framework/RepoIdSetMap.cpp:
        * dds/DCPS/transport/framework/TransportHeader.inl:
        * dds/DCPS/transport/framework/TransportHeader.cpp:
        * dds/DCPS/transport/multicast/ReliableSession.cpp:

          Moved various operators and the Serializer class into namespace
          OpenDDS::DCPS.  This includes the QoS helpers.
          Updated #includes, namespaces, and names for generated code.

        * dds/DdsDcps.mpc:
        * dds/dcps_bits.mpb:

          Updated for new code generator.

        * dds/DdsDcpsGuid.idl:

          GUID_t is no longer treated as a DCPS_DATA_TYPE.  In the past this
          was just done in order to get a generated KeyLessThan struct.  Now
          that KeyLessThan struct is provided in GuidUtils.h.

        * dds/InfoRepo/DCPSInfoRepo.mpc:
        * dds/InfoRepo/DCPS_IR_Domain.h:
        * dds/InfoRepo/DCPS_IR_Participant.h:
        * dds/InfoRepo/DCPS_IR_Publication.cpp:
        * dds/InfoRepo/DCPS_IR_Subscription.cpp:
        * dds/InfoRepo/DCPS_IR_Topic.cpp:
        * dds/InfoRepo/DCPS_Utils.cpp:

          Updated #includes, namespaces, and names for generated code.

        * dds/idl/CPPTemplate.txt:
        * dds/idl/HTemplate.txt:

          Updated names of generated functions.

        * dds/idl/be_global.h:
        * dds/idl/be_global.cpp:
        * dds/idl/be_produce.cpp:
        * dds/idl/be_init.cpp:

          Added support for -o, -Wb,tao_include_prefix and -SI options.
          Implemented logic for when to #include other generated headers.

        * dds/idl/dds_generator.h:

          Moved some common code here and refactored other files to use it.

        * dds/idl/ts_generator.cpp:

          Use some of the code in dds_generator.h.

        * dds/idl/dds_visitor.cpp:

          Added the two new generators (keys and marshal) to the list.

        * dds/idl/keys_generator.h:
        * dds/idl/keys_generator.cpp:

          Implemented a generator for DCPS_DATA_KEY key-comparison structs.

        * dds/idl/marshal_generator.h:
        * dds/idl/marshal_generator.cpp:

          Implemented a generator for OpenDDS marshaling (which includes the
          "find size", "max marshaled size", "is bounded size" functions along
          with the operators << and >> for OpenDDS::DCPS::Serializer.
          This replaces code that was previously in TAO_IDL_BE.

        * dds/idl/metaclass_generator.cpp:

          Integrated the older support for "ORDER BY" in QueryCondition with
          the new getMetaStruct<>() infrastructure.

        * examples/DCPS/IntroductionToOpenDDS/StockQuoter.mpc:

          Added empty TypeSupport_Files sections just to be safe, but
          they're not really needed at this point.

        * java/idl2jni/codegen/be_global.h:
        * java/idl2jni/codegen/be_global.cpp:
        * java/idl2jni/codegen/be_produce.cpp:

          Implemented the -Wb,tao_include_prefix option (see opendds_idl).

        * java/tao/tao_java.mpc:

          Use -Wb,tao_include_prefix to generate the correct #includes.

        * tests/DCPS/BuiltInTopicTest/BuiltInTopicTest.mpc:
        * tests/DCPS/SetQosPartition/SetQosPartition.mpc:

          Fixed an incorrect "after +=".

        * tests/DCPS/Compiler/idl_test1_lib/FooDef.idl:
        * tests/DCPS/Compiler/idl_test1_lib/idl_test1_lib.mpc:
        * tests/DCPS/Compiler/idl_test1_main/README.txt:
        * tests/DCPS/Compiler/idl_test1_main/main.cpp:
        * tests/DCPS/Compiler/idl_test3_lib/idl_test3_lib.mpc:
        * tests/DCPS/Compiler/idl_test3_main/README.txt:
        * tests/DCPS/Compiler/idl_test3_main/main.cpp:

          Updated tests for the new opendds_idl code generator.

        * tests/DCPS/FooTest3_0/SimpleDataReader.cpp:
        * tests/DCPS/FooTest3_1/SimpleDataReader.cpp:
        * tests/DCPS/FooTest3_2/SimpleDataReader.cpp:
        * tests/DCPS/FooTest4/Writer.cpp:

          Updated the #includes and the namespace for the Serializer class.

        * tests/DCPS/Presentation/main.cpp:
        * tests/DCPS/UnitTests/LivelinessCompatibility.cpp:
        * tests/DCPS/FooTest4/main.cpp:

          Added a using-declaration for the DDS::Time_t and QoS class's
          operators (<, >, ==).

        * tests/DCPS/Serializer/SerializerTest.cpp:
        * tests/DCPS/FooType3/README.txt:
        * tests/DCPS/FooType4/README.txt:

          Updated namespace for the Serializer class.

        * tests/DCPS/FooTest3_0/PubDriver.cpp:
        * tools/odds_dissector/odds_packet.cpp:

          Updated name of the generated "find size" / "is bounded size"
          functions.

        * tools/odds_monitor/MonitorDataStorage.h:

          Added a using-declaration for the generated key comparator.

        * bin/DCPS:
        * bin/DCPS/CPPTemplate.pm:
        * bin/DCPS/HTemplate.pm:
        * bin/DCPS/IDLTemplate.pm:
        * bin/dcps_ts.pl:

          Removed these files.  This is now covered by opendds_idl.

Fri Apr 23 21:01:57 UTC 2010  Yan Dai  <dai_y@ociweb.com>

        * dds/DCPS/OwnershipManager.cpp:

          Fixed a bug that access data after iterator is erased.

Tue Apr 20 15:07:59 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_ts_defaults.mpb:

          Set output_follows_input to 0.

        * java/dds/dcps_java_optional.mpb:

          Fixed output files for Java Built-in Topics support.

Tue Apr 20 13:55:44 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_ts_defaults.mpb:

          Corrected the paths to the *Template.txt files.

Mon Apr 19 22:08:53 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * MPC/config/dcps_java.mpb:
        * MPC/config/dcps_ts_defaults.mpb:
        * java/dds/dcps_java_optional.mpb:

          Use the new generator, opendds_idl, in place of dcps_ts.pl.

        * MPC/modules/TYPESUPPORTHelper.pm:

          Adjusted for opendds_idl's command-line arguments.

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:

          Added support for 64-bit (signed and unsigned) integral types.

        * dds/DCPS/ZeroCopySeq_T.inl:

          Avoid macro expansion of "max" in std::max().

        * dds/DdsDcps.mpc:

          Removed temporary settings from last commit.

        * dds/idl/CPPTemplate.txt:
        * dds/idl/HTemplate.txt:
        * dds/idl/IDLTemplate.txt:

          Moved the 3 perl modules from bin/DCPS here.  Renamed them to .txt
          and removed the perl-specific parts.  These will be read at runtime
          by opendds_idl.

        * dds/idl/be_global.h:
        * dds/idl/be_global.cpp:
        * dds/idl/be_produce.cpp:

          Added support for Java bindings (used to be JavaTypeSupportImpl.pm).
          Changed output file naming for opendds_idl to what dcps_ts.pl used.
          Thus the output files are FooTypeSupportImpl.{h,cpp} and
          FooTypeSupport.idl.

        * dds/idl/be_init.cpp:

          Use $DDS_ROOT as an implicit pre-processor include path (-I).

        * dds/idl/dds_visitor.h:
        * dds/idl/dds_visitor.cpp:
        * dds/idl/metaclass_generator.cpp:
        * dds/idl/ts_generator.h:
        * dds/idl/ts_generator.cpp:

          Moved the logic that used to be in dcps_ts.pl here (ts_generator).
          The majority of the code-generation is done by reading the plain-text
          template files (see above).

        * java/build_scripts/jni_check.pl:

          Added support for 64-bit DLLs on Windows.

        * tests/DCPS/FilterExpression/FilterExpression.cpp:

          Changed the #include to the new name of the generated header.

        * dds/dcps_bits.mpb:
        * dds/InfoRepo/DCPSInfoRepo.mpc:
        * dds/monitor/monitor.mpc:
        * contrib/wrapper/example/WrapperStockQuoter.mpc:
        * examples/DCPS/IntroductionToOpenDDS/StockQuoter.mpc:
        * java/jms/native/opendds_jms_native.mpc:
        * java/tests/complex_idl/complex_idl_test.mpc:
        * java/tests/messenger/messenger_idl/messenger_idl_test.mpc:
        * java/tests/multirepo/multirepo_test.mpc:
        * performance-tests/DCPS/TypeNoKeyBounded/TypeNoKeyBounded.mpc:
        * tests/DCPS/Compiler/idl_test2_lib/idl_test2_lib.mpc:
        * tests/DCPS/FooType/FooType.mpc:
        * tests/DCPS/FooType3/DcpsFooType3.mpc:
        * tests/DCPS/FooType3NoKey/DcpsFooType3NoKey.mpc:
        * tests/DCPS/FooType3Unbounded/DcpsFooType3Unbounded.mpc:
        * tests/DCPS/FooType4/DcpsFooType4.mpc:
        * tests/DCPS/FooType5/DcpsFooType5.mpc:
        * tests/DCPS/MultiTopicTypes/MultiTopicTypes.mpc:
        * tests/DCPS/TestFramework/TestFramework.mpc:

          Changed dcps_ts_flags settings to use new options for opendds_idl.
          Mostly this is just a simple s/--export=/-Wb,export_macro=/.

Fri Apr 16 23:13:41 UTC 2010  Yan Dai  <dai_y@ociweb.com>

        * tests/DCPS/Ownership/Writer.cpp:

          Replaced function call in ACE_ASSERT with if statement to
          fix test failure on non-debug build because ACE_ASSERT does
          nothing.

        * tests/DCPS/Ownership/run_test.pl:

          Made to remove old logs.

Thu Apr 15 22:02:07 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        The Content-Subscription Profile requires some support from the code
        generator for runtime binding to the user-defined structures.  This
        commit starts to implement that generated code.  Eventually the new
        code generator will generate all code for OpenDDs, including the code
        that's currently generated by tao_idl -Gdcps and by dcps_ts.pl.

        * dds/idl:
        * dds/idl/be_extern.h:
        * dds/idl/be_global.h:
        * dds/idl/be_global.cpp:
        * dds/idl/be_init.cpp:
        * dds/idl/be_produce.cpp:
        * dds/idl/dds_generator.h:
        * dds/idl/dds_generator.cpp:
        * dds/idl/dds_visitor.h:
        * dds/idl/dds_visitor.cpp:
        * dds/idl/drv_args.cpp:
        * dds/idl/drv_preproc.cpp:
        * dds/idl/metaclass_generator.h:
        * dds/idl/metaclass_generator.cpp:
        * dds/idl/opendds_idl.cpp:
        * dds/idl/opendds_idl.mpc:

          New code generator that uses the TAO_IDL front-end.  As of now this
          only generates support for the filter strings used by QueryCondition
          and by (the soon to be implemented) ContentFilteredTopic.

        * dds/DdsDcps.mpc:
        * dds/dcps_bits.mpb:

          Invoke the new code generator on DdsDcpsInfrastructure.idl

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:

          #if 0'ed some temporary code which is now handled by the new code
          generator.

        * bin/dcps_ts.pl:

          Added a -z switch which #includes the new generated header in the
          generated TypeSupportImpl.cpp

        * tests/DCPS/FilterExpression/FilterExpression.cpp:

          #include the new generated header and added try/catch.

Tue Apr 13 21:58:14 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/DataCollector_T.cpp:

          Fixed 64-bit warnings that show up when compiling DataReaderImpl.

        * dds/DCPS/DataReaderImpl.cpp:

          Fixed 64-bit warnings and improved error handling in
          create_querycondition().

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:

          Added support for unsigned int (CORBA::ULong) types in the filter
          structs.  Also improved the support for conversion between data
          types.  Improved error handling in the case where the parse fails.
          Fixed logic for short-circuiting ANDs and ORs.  Refactored
          implementation of Value to use a Boost.Variant-like visitor instead
          of switch statements.

        * tests/DCPS/FilterExpression/FilterExpression.cpp:

          Added tests that actually evaluate filter expressions using the
          struct TopicBuiltinTopicData.

        * tests/DCPS/QueryCondition/QueryConditionTest.cpp:

          Removed some extraneous namespace scoping in preparation for
          enhancing this test once we have the code generation support.

Mon Apr 12 14:24:38 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:

          Implemented filter evaluation (first pass).  It still needs to handle
          more data types, and it depends on some help from a code generation
          tool (TAO_IDL or something else), which is not done yet.  For now
          the support for the TopicBuiltinTopicData struct is implemented here
          for testing.

        * bin/dcps_tests.lst:
        * tests/DCPS/FilterExpression/FilterExpression.cpp:
        * tests/DCPS/FilterExpression/FilterExpressionTest.mpc:
        * tests/DCPS/FilterExpression/run_test.pl:

          Added a test for parsing filter (and query) expressions.  Right now
          this test only checks the syntax of the expressions.

Fri Apr  9 18:11:38 UTC 2010  Yan Dai  <dai_y@ociweb.com>

        * bin/DCPS/CPPTemplate.pm:
        * bin/DCPS/HTemplate.pm:
        * dds/DCPS/BitPubListenerImpl.h:
        * dds/DCPS/BitPubListenerImpl.cpp:
        * dds/DCPS/DataReaderImpl.h:
        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/DataWriterImpl.h:
        * dds/DCPS/DataWriterImpl.cpp:
        * dds/DCPS/DomainParticipantImpl.h:
        * dds/DCPS/DomainParticipantImpl.cpp:
        * dds/DCPS/InstanceState.h:
        * dds/DCPS/InstanceState.cpp:
        * dds/DCPS/OwnershipManager.h:
        * dds/DCPS/OwnershipManager.cpp:
        * dds/DCPS/Qos_Helper.inl:
        * dds/DCPS/RequestedDeadlineWatchdog.cpp:
        * dds/DCPS/SubscriberImpl.h:
        * dds/DCPS/SubscriberImpl.cpp:
        * dds/DCPS/TopicImpl.h:
        * dds/DCPS/TopicImpl.cpp:
        * dds/DCPS/OwnershipManager.h:
        * dds/DCPS/OwnershipManager.cpp:
        * dds/InfoRepo/DCPS_Utils.cpp:

          Added support for the ownership qos.

        * tests/DCPS/Ownership/DataReaderListener.h:
        * tests/DCPS/Ownership/DataReaderListener.cpp:
        * tests/DCPS/Ownership/Messenger.idl:
        * tests/DCPS/Ownership/Ownership.mpc:
        * tests/DCPS/Ownership/Writer.h:
        * tests/DCPS/Ownership/Writer.cpp:
        * tests/DCPS/Ownership/pub.ini:
        * tests/DCPS/Ownership/publisher.cpp:
        * tests/DCPS/Ownership/run_test.pl:
        * tests/DCPS/Ownership/sub.ini:
        * tests/DCPS/Ownership/subscriber.cpp:
        * tests/DCPS/Ownership/tcp.conf:

          New test.

        * tests/DCPS/unit/MyTypeSupportImpl.h:

          Accommodated the changes.

        * bin/dcps_tests.lst:

          Added Ownership test cases.

Wed Apr  7 15:32:56 UTC 2010  Adam Mitz  <mitza@ociweb.com>

        The following is for the Content-Subscription Profile implementation

        * dds/DCPS/FilterEvaluator.h:
        * dds/DCPS/FilterEvaluator.cpp:
        * dds/DCPS/FilterExpressionGrammar.h:

          Added a new class for evaluating filter (and query) expressions.
          This is an early version that parses the expression but doesn't do
          much evaluation, except as needed to support the current OpenDDS
          feature of "ORDER BY" sorting in QueryCondition.

        * dds/DCPS/DataReaderImpl.cpp:
        * dds/DCPS/QueryConditionImpl.h:
        * dds/DCPS/QueryConditionImpl.cpp:
        * dds/DCPS/RakeResults_T.h:
        * dds/DCPS/RakeResults_T.cpp:

          Made use of the new FilterEvaluator for QueryCondition.

        * dds/DCPS/ZeroCopySeq_T.inl:

          Fixed 64-bit warnings (when size_t is 64 bits).  Also in
          RakeResults_T.cpp.

        * dds/DdsDcps.mpc:
        * dds/DCPS/yard/*:

          yard (Yet Another Recursive Descent) is a 3rd-party library for
          constructing parsers at compile time using template metaprogramming.
          The license is either Public Domain (if applicable) or MIT, so we
          are including it here.  It's a header-only library.

Wed Mar 24 15:43:43 UTC 2010  Mike Martinez  <martinez_m@ociweb.com>

        Merging trunk changes 3113:3165 out to branch.

        Tue Mar 23 19:32:21 UTC 2010  Trevor Fields  <fields_t@ociweb.com>

                * OpenDDS version 2.1.2 released.

        Tue Mar 23 15:57:27 UTC 2010  Steven Stallion  <stallions@ociweb.com>

                * NEWS:

                  Updated documentation for next release.

        Tue Mar 23 15:45:06 UTC 2010  Steven Stallion  <stallions@ociweb.com>

                * NEWS:
                * README:

                  Updated documentation for next release.

        Mon Mar 22 21:54:24 UTC 2010  Yan Dai  <dai_y@ociweb.com>

                * NEWS:

                  Added changes for next release.

        Mon Mar 22 19:53:59 UTC 2010  Yan Dai  <dai_y@ociweb.com>

                * dds/DCPS/DataWriterImpl.h:
                * dds/DCPS/DataWriterImpl.cpp:
                * dds/DCPS/transport/framework/DataLink.h:
                * dds/DCPS/transport/framework/DataLink.inl:
                * dds/DCPS/transport/framework/DataLinkSet.h:
                * dds/DCPS/transport/framework/DataLinkSet.inl:
                * dds/DCPS/transport/framework/TransportInterface.h:
                * dds/DCPS/transport/framework/TransportInterface.inl:
                * dds/DCPS/transport/framework/TransportSendStrategy.h:
                * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

                  Renamed remove_all_control_msgs() to remove_all_msgs() as the function
                  was changed to removes all messages sent by a datawriter.

                * dds/DCPS/WriteDataContainer.cpp:

                  Removed remove_sample call on samples in sending_data or released_data
                  lists as it's redundant with remove_all_msgs().

        Fri Mar 19 22:25:14 UTC 2010  Mike Martinez  <martinez_m@ociweb.com>

                * performance-tests/Bench/bin/expandColors.pl:
                * performance-tests/Bench/bin/extract.pl:
                * performance-tests/Bench/bin/genstats.pl:
                * performance-tests/Bench/bin/mktable.pl:
                * performance-tests/Bench/bin/reduce.pl:
                * performance-tests/Bench/bin/run_test:
                * performance-tests/Bench/doc/userguide.html:
                * performance-tests/Bench/tests/thru/test-commands.txt:

                  Updating documentation in scripts and user guide.

        Fri Mar 19 21:23:54 UTC 2010  Yan Dai  <dai_y@ociweb.com>

                * dds/DCPS/WriteDataContainer.cpp:

                  - Added lock in data_dropped as it could be called by the
                    the transport thread that does not hold the lock before
                    calling it. Otherwise, it may cause SEGV when write()
                    thraad request transport removing a sample while sample
                    is released due to tranport delayed notification.
                  - Added code to remove released_data_ samples in
                    unregister_all().

                * dds/DCPS/transport/framework/DataLink.h:
                * dds/DCPS/transport/framework/DataLink.inl:
                * dds/DCPS/transport/framework/DataLink.cpp:
                * dds/DCPS/transport/framework/DataLinkSet.inl:
                * dds/DCPS/transport/framework/PacketRemoveVisitor.h:
                * dds/DCPS/transport/framework/PacketRemoveVisitor.cpp:
                * dds/DCPS/transport/framework/QueueRemoveVisitor.h:
                * dds/DCPS/transport/framework/QueueRemoveVisitor.inl:
                * dds/DCPS/transport/framework/QueueRemoveVisitor.cpp:
                * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.h:
                * dds/DCPS/transport/framework/ThreadPerConnectionSendTask.cpp:
                * dds/DCPS/transport/framework/TransportQueueElement.h:
                * dds/DCPS/transport/framework/TransportQueueElement.inl:
                * dds/DCPS/transport/framework/TransportSendElement.h:
                * dds/DCPS/transport/framework/TransportSendElement.cpp:
                * dds/DCPS/transport/framework/TransportSendStrategy.h:
                * dds/DCPS/transport/framework/TransportSendStrategy.inl:
                * dds/DCPS/transport/framework/TransportSendStrategy.cpp:

                  - Fixed an issue that DataWriter request transport to remove
                    a sample while the sample is released by transport.
                    This could happen when there are more number of datalinks
                    upon sample removing than sending. A datalink is requested
                    to remove sample is not requested for sending. The sample
                    may already be released while the link uses the sample to
                    find in it's storage.

                    Wrappered sample to remove with TransportSendElement so the
                    DataWriter data_dropped() will be called only when sample is
                    removed from all links it originally sent to.
                    The TransportSendElement instance also carry the information
                    if a data_dropped is called to DataWriter, if it does, then
                    stop using the sample to remove from the rest links because
                    the sample may already be released.

                  - Added/update methods to accommodate the changes above.
                  - Added transport_shutdown to TransportSendStrategy to avoid
                    delayed notification upon transport release as the transport
                    release is normally called after DataWriter is destroyed.

                * dds/DCPS/transport/simpleTCP/SimpleTcpConnection.cpp:

                  Added receive_strategy_ nil value check in handle_close()
                  to avoid crash if receive_strategy_ is wiped before
                  handle_close() called.

        Tue Mar 16 21:01:14 UTC 2010  Steven Stallion  <stallions@ociweb.com>

                * dds/DCPS/transport/multicast/ReliableSession.h:
                * dds/DCPS/transport/multicast/ReliableSession.cpp:

                  Fixed deadlock caused by shared mutex between starting and
                  acknowledgement critical sections.

        Tue Mar 16 14:18:51 UTC 2010  Mike Martinez  <martinez_m@ociweb.com>

                * performance-tests/Bench/tests/latency/p1-16000.ini:

                  Update to use new datamodel.  Thanks to Don Busch for finding
                  this.

        Thu Mar 11 23:54:38 UTC 2010  Yan Dai  <dai_y@ociweb.com>

                * dds/DCPS/WriteDataContainer.cpp:

                  Fixed a bug in obtain_buffer() when max_blocking_time is 0 or very small
                  period. The condition makes the write() not wait for old sample releasing.
                  In this case, the TIMEOUT error code should be returned.

                * dds/DCPS/DataWriterImpl.cpp:

                  Turned off the error logging as obtain_buffer() returns TIMEOUT error code.

                * tests/DCPS/FooTest5/InstanceDataMap.cpp:
                * tests/DCPS/FooTest5/Writer.cpp:
                * tests/DCPS/FooTest5/run_test.pl:

                  - Adjusted result verify.
                  - Log timeout error return from write() only if DCPS_debug_level > 0.

        Wed Mar 10 16:25:55 UTC 2010  Steven Stallion  <stallions@ociweb.com>

                * dds/DCPS/transport/framework/ThreadSynchStrategy.h:
                * dds/DCPS/transport/framework/ThreadSynchStrategy_rch.h:
                * dds/DCPS/transport/framework/TransportConfiguration.h:
                * dds/DCPS/transport/framework/TransportConfiguration.inl:
                * dds/DCPS/transport/framework/TransportConfiguration.cpp:

                  Added support for optionally specifying a ThreadSynchStrategy
                  implementation at construction-time (submitted by Don Busch).

                * dds/DCPS/transport/udp/UdpConfiguration.cpp:
                * dds/DCPS/transport/multicast/MulticastConfiguration.cpp:

                  Updated UDP-based transports to use a NullSynchStrategy by
                  default; this prevents spurious threads from being spawned
                  for each created DataLink (submitted by Don Busch).

                * dds/DCPS/transport/udp/UdpTransport.h:
                * dds/DCPS/transport/udp/UdpTransport.cpp:

                  Updated support for endpoint addressing; DataLinks are created
                  per unique endpoint rather than RepoId (submitted by Don Busch).

        Tue Mar  9 19:08:05 UTC 2010  Steven Stallion  <stallions@ociweb.com>

                * NEWS:
                * README:

                  Updated documentation for next release.

Wed Mar 10 03:59:39 UTC 2010  Mike Martinez  <martinez_m@ociweb.com>

        * BranchChangeLog:

          Added branch specific change log.
          Branch was from trunk@3112


# vim: filetype=changelog
Local Variables:
mode: change-log
add-log-time-format: (lambda () (progn (setq tz (getenv "TZ")) (set-time-zone-rule "UTC") (setq time (format-time-string "%a %b %e %H:%M:%S %Z %Y" (current-time))) (set-time-zone-rule tz) time))
indent-tabs-mode: nil
End:
