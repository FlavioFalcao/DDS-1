project(*Federator): dcps {
  sharedname = Federator
  libout     = $(DDS_ROOT)/lib
  includes  += $(DDS_ROOT)

  idlflags    += -Wb,export_macro=OpenDDS_Federator_Export -Wb,export_include=federator_export.h -Wb,pch_include=DcpsInfo_pch.h
  dynamicflags = OPENDDS_FEDERATOR_BUILD_DLL
  dcps_ts_flags += --export=OpenDDS_Federator_Export --pch DcpsInfo_pch.h

  pch_header   =
  pch_source   =

  TypeSupport_Files {
    Federator.idl
  }

  IDL_Files {
    Federator.idl
    FederatorTypeSupport.idl
  }

  Source_Files {
    FederatorConfig.cpp
    FederatorRemoteLink.cpp
    FederatorSubscriptions.cpp
    FederatorPublications.cpp
    FederatorManagerImpl.cpp
    FederatorTypeSupportImpl.cpp
  }

  Header_Files {
    UpdateListener_T.h
    FederatorManagerImpl.h
  }

  Template_Files {
    UpdateListener_T.cpp
    FederatorManager_T.cpp
    FederatorManager_T_Impl.cpp
  }

}

project(*InfoRepo): dcpsexe, iortable, DCPSInfoRepo_bits, imr_client, svc_utils {
  exename = DCPSInfoRepo
  exeout  = $(DDS_ROOT)/bin

  libpaths += $(DDS_ROOT)/lib
  libs     += Federator
  after    += *Federator

  IDL_Files {
  }

  Source_Files {
    DCPS_Entity_Id_Generator.cpp
    DCPSInfo_i.cpp
    DcpsInfo_pch.cpp
    DCPSInfoRepo.cpp
    DCPS_IR_Domain.cpp
    DCPS_IR_Participant.cpp
    DCPS_IR_Publication.cpp
    DCPS_IR_Subscription.cpp
    DCPS_IR_Topic.cpp
    DCPS_IR_Topic_Description.cpp
    DCPS_Utils.cpp
    DomainParticipantListener_i.cpp
    PersistenceUpdater.cpp
    UpdateManager.cpp
    Updater.cpp
  }

}

